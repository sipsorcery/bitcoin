name: CI

on:
  push:
    branches:    
      - actions_test
jobs:
  build:
    runs-on: windows-latest
    env:
        QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.4/Qt5.9.8_x64_static_vs2019.zip'
        QT_DOWNLOAD_HASH: 'f285cbb02bec3b3f3cc2621e3fa7d5edf0d6a66fa30c57859e583acda954ea80'
        QT_LOCAL_PATH: 'C:\Qt5.9.8_x64_static_vs2019'
        VCPKG_INSTALL_PATH: "$env:VCPKG_INSTALLATION_ROOT/installed"
        PLATFORM: x64
    steps:
    - uses: actions/checkout@v1 
      
    - name: Set env var for cachepath
      run: echo "::set-env name=cachepath::$($env:VCPKG_INSTALL_PATH)"  
      
    - uses: actions/cache@v1
      id: vcpkgcache
      with:
       path: ${{ env.cachepath }}
       key: ${{ runner.os }}-vcpkg
        
    - name: Update vcpkg and install packages
      if: steps.vcpkgcache.outputs.cache-hit != 'true'
      run: |
        $env:PACKAGES = Get-Content -Path "$env:GITHUB_WORKSPACE/build_msvc/vcpkg-packages.txt"
        Write-Host "vcpkg list: $env:PACKAGES"
        cd $env:VCPKG_INSTALLATION_ROOT
        #$env:GIT_REDIRECT_STDERR = '2>&1' # git is writing non-errors to STDERR when doing git pull. Send to STDOUT instead.
        git pull origin master
        .\bootstrap-vcpkg.bat
        #Add-Content "C:\tools\vcpkg\triplets\$env:PLATFORM-windows-static.cmake" "set(VCPKG_BUILD_TYPE release)"
        #.\vcpkg install --triplet $env:PLATFORM-windows-static $env:PACKAGES.split() > $null
        .\vcpkg install --triplet $env:PLATFORM-windows-static $env:PACKAGES.split()
        #cd "$env:APPVEYOR_BUILD_FOLDER"
        .\vcpkg integrate install
        cd $env:GITHUB_WORKSPACE
    - name: Install prebuilt Qt libraries
      run: |
       if(!(Test-Path -Path ($env:QT_LOCAL_PATH))) {
          Write-Host "Downloading Qt binaries.";
          Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;
          Write-Host "Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...";
          if((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {
            Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;
            Write-Host "Qt binary download matched the expected hash.";
          }
          else {
            Write-Host "ERROR: Qt binary download did not match the expected hash.";
            exit 1
          }
        }
        else {
           Write-Host "Qt binaries already present.";
        }
    - name: Generate project files
      run: python build_msvc\msvc-autogen.py
    - name: Setup MSBuild.exe
      uses: warrenbuckley/Setup-MSBuild@v1
    - name: Build
      run: msbuild build_msvc\bitcoin.sln /m /v:n
    - name: Run test_bticoin
      run: src\test_bitcoin.exe -k stdout -e stdout 2> NUL
    - name: Run bench_bitcoin
      run: src\bench_bitcoin.exe -evals=1 -scaling=0 > NUL
    - name: bitcoin-util-test
      run: python test\util\bitcoin-util-test.py
    - name: rpcauth-test
      run: python test\util\rpcauth-test.py
    - name: test_runner
      run: python test\functional\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation
      
